name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            ext: ""
          - os: windows-latest
            target: windows
            ext: ".exe"
          - os: macos-latest
            target: macos
            ext: ""
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Odin (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        ODIN_VERSION="dev-2025-09"
        curl -L "https://github.com/odin-lang/Odin/releases/download/${ODIN_VERSION}/odin-ubuntu-amd64-${ODIN_VERSION}.zip" -o odin.zip
        unzip odin.zip
        sudo mv odin /usr/local/bin/
        chmod +x /usr/local/bin/odin
        odin version
    
    - name: Setup Odin (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $ODIN_VERSION = "dev-2025-09"
        Invoke-WebRequest -Uri "https://github.com/odin-lang/Odin/releases/download/$ODIN_VERSION/odin-windows-amd64-$ODIN_VERSION.zip" -OutFile "odin.zip"
        Expand-Archive -Path "odin.zip" -DestinationPath "."
        $env:PATH += ";$PWD"
        odin.exe version
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --install || true
    
    - name: Build project (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        odin build . -out:ascii_art-${{ matrix.target }}${{ matrix.ext }}
    
    - name: Build project (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ./odin.exe build . -out:ascii_art-${{ matrix.target }}${{ matrix.ext }}
    
    - name: Create archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        tar -czf ascii_art-${{ matrix.target }}.tar.gz ascii_art-${{ matrix.target }}${{ matrix.ext }}
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path "ascii_art-${{ matrix.target }}${{ matrix.ext }}" -DestinationPath "ascii_art-${{ matrix.target }}.zip"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ascii_art-${{ matrix.target }}
        path: |
          ascii_art-${{ matrix.target }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Display structure of downloaded files
      run: ls -la artifacts/
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
    
    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ascii_art-linux/ascii_art-linux.tar.gz
        asset_name: ascii_art-linux.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ascii_art-windows/ascii_art-windows.zip
        asset_name: ascii_art-windows.zip
        asset_content_type: application/zip
    
    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ascii_art-macos/ascii_art-macos.tar.gz
        asset_name: ascii_art-macos.tar.gz
        asset_content_type: application/gzip
